
'use strict';

var _ = require('lodash');

/**
 * Grammar item which represents a point in the parse.
 * @constructor
 * @param {Production} P - The production.
 * @param {Number} i - The position of the dot.
 */
function Item(P, i) {
	if (this instanceof Item === false) {
		return new Item(P, i);
	}
	this.production = P;
	this.dot = i;
	this.next = this.isComplete ? null : Item(this.production, this.dot + 1);
}

/**
* @member {Item} next
* The next item after this one.
*/

/**
 * @member {Symbol} symbol
 * The symbol at the dot in the production.
 */
Object.defineProperty(Item.prototype, 'symbol', {
	get: function getSymbol() {
		return this.production.derives[this.dot];
	}
});

/**
 * @member {Boolean} isComplete
 * True if the dot is at the right-most position.
 */
Object.defineProperty(Item.prototype, 'isComplete', {
	get: function getComplete() {
		return this.dot === this.production.derives.length;
	}
});

/**
 * Generate the typical string representation of an item in the form:
 * A → b c ⋅ d.
 * @returns {String} String representation.
 */
Item.prototype.toString = function toString() {
	var x = this.production.derives.slice();
	x.splice(this.dot, 0, '⋅');
	return '' + this.production.symbol + ' → ' + x.join(' ');
};

/**
 * Determine if an item comes immediately before another. Two items must have
 * the same production to be able to compare their dot positions.
 * For example: A → b ⋅ c d precedes A → b c ⋅ d.
 * @param {Item} item The item to test against.
 * @returns {Boolean} True if this is parsed immediately before item.
 *
 */
Item.prototype.precedes = function precedes(item) {
	return this.production === item.production && this.dot === item.dot - 1;
};

/**
 * Determines if the non-terminal after the dot can be generated by the given
 * item. The given item must reduce to the same non-terminal and must have dot
 * position 0.
 * @param {Object} item The item to test against.
 * @returns {Boolean} True if item can reduce to the symbol at this dot.
 */
Item.prototype.derives = function derives(item) {
	return this.symbol === item.production.symbol && item.dot === 0;
};

module.exports = Item;
